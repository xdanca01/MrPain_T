hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros1) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
#second file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros1) #set up coefficients for optimization
hist(nzeros1, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(-prod(dnorm(x, mean=mu, sd=sigma)))
}
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(prod(dnorm(x, mean=mu, sd=sigma)))
}
help(dnorm)
?optim
par
par2
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(dnorm(x, mean=mu, sd=sigma))
}
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(prod(dnorm(x, mean=mu, sd=sigma)))
}
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
#first file
par <- optim(c(0.3, 0.5), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
help(prod)
hist(nzeros, xlim = c(0,100), freq = FALSE)
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
par
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
print(mu)
return(prod(dnorm(x, mean=mu, sd=sigma)))
}
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
print(mu)
return(-prod(dnorm(x, mean=mu, sd=sigma)))
}
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(-prod(dnorm(x, mean=mu, sd=sigma)))
}
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(-sum(dnorm(x, mean=mu, sd=sigma)))
}
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
par
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(-sum(dnorm(x, mean=mu, sd=sigma, log=TRUE)))
}
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
return(-sum(dnorm(x, mean=mu, sd=sigma, log=TRUE)))
}
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
-sum(dnorm(x, mean=mu, sd=sigma, log=TRUE))
}
#first file
par <- optim(c(0.3, 0.3), fit_normal, x=nzeros) #set up coefficients for optimization
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
#first file
par <- optim(c(50, 3), fit_normal, x=nzeros) #set up coefficients for optimization
fit_normal <- function(x, par){
mu <- par[1]
sigma <- par[2]
-sum(dnorm(x, mean=mu, sd=sigma, log=TRUE))
}
#first file
par <- optim(c(50, 3), fit_normal, x=nzeros) #set up coefficients for optimization
par
hist(nzeros, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
#second file
par <- optim(c(30, 5), fit_normal, x=nzeros1) #set up coefficients for optimization
hist(nzeros1, xlim = c(0,100), freq = FALSE)
lines(0:100, dnorm(0:100, mean = par$par[1], sd = par$par[2]), col = 'red')
data <- read.csv('Computers.csv', header = TRUE, sep = ',')
head(data)
ram_2 <- #take only prices for computers with 4GB RAM
hist() #create a histogram, set up proper values for x-axis and y-axis
data <- read.csv('Computers.csv', header = TRUE, sep = ';')
head(data)
ram_2 <- data[data$ram == 2]$ram #take only prices for computers with 4GB RAM
ram_2 <- data[data$ram == 2,]$ram #take only prices for computers with 4GB RAM
ram_2
ram_2 <- data[data$ram == 2,]$price #take only prices for computers with 4GB RAM
hist(ram_2) #create a histogram, set up proper values for x-axis and y-axis
data <- read.csv('Computers.csv', header = TRUE, sep = ';')
head(data)
ram_2 <- data[data$ram == 2,]$price #take only prices for computers with 4GB RAM
ram_2
hist(ram_2) #create a histogram, set up proper values for x-axis and y-axis
ram_2 <- as.numeric(data[data$ram == 2,]$price) #take only prices for computers with 4GB RAM
hist(ram_2) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_2, freq=FALSE) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(1700, 5), fit_normal, x=ram_2) #set up coefficients for optimization
par
x <- seq(800, 2500, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
hist(ram_2, freq=FALSE, ylim = c(0, 0.002)) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(1700, 5), fit_normal, x=ram_2) #set up coefficients for optimization
x <- seq(800, 2500, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4) #create a histogram, set up proper values for x-axis and y-axis
ram_4
hist(ram_4, freq=FALSE) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_4, freq=FALSE, breaks=10) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_4, freq=FALSE, breaks=10) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_4, freq=FALSE, breaks=10) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_4, freq=FALSE, break=10) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_4, freq=FALSE, breaks=100) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(1800, 5), fit_normal, x=ram_4) #set up coefficients for optimization
par <- optim(c(1400, 5), fit_normal, x=ram_4) #set up coefficients for optimization
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(1400, 5), fit_normal, x=ram_4) #set up coefficients for optimization
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
qqplot(ram_4)
qqnorm(ram_4)
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
ram_4 <- as.numeric(data[data$ram == 4 && data$price != NA,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
#qqnorm(ram_4)
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
ram_4 <- as.numeric(data[data$ram == 4 && is.na(data$price) == FALSE,]$price)#take only prices for computers with 4GB RAM
ram_4 <- as.numeric(data[data$ram == 4 && is.na(data$price) == FALSE,]$price)#take only prices for computers with 4GB RAM
ram_4
is.na(ram_4)
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
hist(ram_4, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
, freq=FALSE
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
qqnorm(ram_4)
help(omit)
help(omit)
data <- read.csv('Computers.csv', header = TRUE, sep = ',')
head(data)
ram_2 <- as.numeric(data[data$ram == 2,]$price) #take only prices for computers with 4GB RAM
hist(ram_2, freq=FALSE, ylim = c(0, 0.002)) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(1700, 5), fit_normal, x=ram_2) #set up coefficients for optimization
x <- seq(800, 2500, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
qqnorm(ram_4)
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15) #create a histogram, set up proper values for x-axis and y-axis
#qqnorm(ram_4)
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
#qqnorm(ram_4)
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
x <- seq(800,4200, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
hist(ram_4, freq=FALSE, breaks=15, xlim=c(0, 3500)) #create a histogram, set up proper values for x-axis and y-axis
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15, xlim=c(700, 3500)) #create a histogram, set up proper values for x-axis and y-axis
#qqnorm(ram_4)
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
x <- seq(800,4200, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15, xlim=c(800, 3500)) #create a histogram, set up proper values for x-axis and y-axis
#qqnorm(ram_4)
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
x <- seq(800,4200, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
data <- read.csv('Computers.csv', header = TRUE, sep = ',')
head(data)
ram_2 <- as.numeric(data[data$ram == 2,]$price) #take only prices for computers with 4GB RAM
hist(ram_2, freq=FALSE, ylim = c(0, 0.002)) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(1700, 5), fit_normal, x=ram_2) #set up coefficients for optimization
x <- seq(800, 2500, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
par
hist(ram_2, freq=FALSE, ylim = c(0, 0.002)) #create a histogram, set up proper values for x-axis and y-axis
par <- optim(c(1700, 70), fit_normal, x=ram_2) #set up coefficients for optimization
par
x <- seq(800, 2500, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
ram_4 <- as.numeric(data[data$ram == 4,]$price)#take only prices for computers with 4GB RAM
hist(ram_4, freq=FALSE, breaks=15, xlim=c(800, 3500)) #create a histogram, set up proper values for x-axis and y-axis
#qqnorm(ram_4)
par <- optim(c(2000, 5), fit_normal, x=ram_4) #set up coefficients for optimization
x <- seq(800,4200, 1)
lines(x , dnorm(x, mean =par$par[1], sd = par$par[2] ), col = 'blue' )
setwd("/home/pdancak/school/MrPain_T/MUNI/MV013/HW2")
library(corrplot)
library(ggfortify)
data <- read.csv("happiness.csv",sep=';')
data$Continent.Name <- as.factor(data$Continent.Name)
#Problem 1
corr_mat <- cor(data[3:8])
corrplot(corr_mat, order = "hclust", addrect = 3)
#Problem 2
my_pca <- prcomp(data[3:8], center=T, scale=T)
s <- summary(my_pca)
plot(s$importance[3,],main="Cumulative Proportion of variance",ylab="proportion",type='o')
#Problem 3
autoplot(my_pca, data = data,loadings = TRUE,loadings.label = TRUE, col.ind = data$Continent.Name, colour = "Continent.Name")
#Problem 4
#my_eigen <- eigen(cov(data[3:8]))
#c1<-my_eigen$vectors[,1]
#c2<-my_eigen$vectors[,2]
#data$c1<-as.matrix(data[3:8]) %*% c1
#data$c2<-as.matrix(data[3:8]) %*% c2
#plot(kmeans(data$c1, 3),kmeans(data$c2, 3),xlab="First component",ylab="Second component", col=data$Continent.Name, pch = 19)
k <- kmeans(my_pca$x, 3)
autoplot(k, data = my_pca$x, frame = TRUE)
#Problem 5
#Rows are continents, cols are clusters
freq_table <- matrix(1:15, nrow = 5, ncol = 3, dimnames = list(levels(data$Continent.Name), c(1,2,3)))
states_clusters <- matrix(1:42, nrow = 42, ncol = 1, dimnames = list(data[data$Continent.Name == "Europe",]$Country.or.region, "Cluster"))
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table
states_clusters
#Problem 6
par(mfrow = c(2, 3))
all_sd <- sd(data$Score)
all_mean <- mean(data$Score)
breaks <- 10
xx <- seq(3, 8,by=0.01)
for(i in levels(data$Continent.Name)){
hist(data[data$Continent.Name == i,]$Score, main=i, xlab = "Score", xlim = c(3,8), breaks = breaks, freq=F)
cont_mean <- mean(data[data$Continent.Name == i,]$Score)
stan_deviation <- sd(data[data$Continent.Name == i,]$Score)
y <- dnorm(xx, cont_mean, stan_deviation)
lines(xx, y, col='red')
}
y <- dnorm(xx, mean = all_mean, sd = all_sd)
hist(data$Score, xlab = "Score", main="All", xlim = c(3,8), breaks = breaks, freq=F)
lines(xx, y, col='red')
length(states_clusters)
freq_table
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(data[i,]$Continent.Name, my_row)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(data[i,]$Continent.Name + my_row)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(data[i,]$Continent.Name)
print(my_row)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(my_row)
print(data[i,]$Continent.Name)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table[1,]
freq_table
freq_table
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(my_row)
print(data[i,]$Continent.Name)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table
#Problem 5
#Rows are continents, cols are clusters
freq_table <- matrix(1:15, nrow = 5, ncol = 3, dimnames = list(levels(data$Continent.Name), c(1,2,3)))
states_clusters <- matrix(1:42, nrow = 42, ncol = 1, dimnames = list(data[data$Continent.Name == "Europe",]$Country.or.region, "Cluster"))
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(my_row)
print(data[i,]$Continent.Name)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table
length(data[data$Continent.Name == "Europe",]$Country.or.region)
length(data[data$Continent.Name == "Africa",]$Country.or.region)
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(i)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
length(data)
length(data$Score)
length(data$Continent.Name)
length(data[data$Continent.Name == "Europe"]$Continent.Name)
length(data[data$Continent.Name == "Europe",]$Continent.Name)
table(data$Continent.Name)
#Problem 5
#Rows are continents, cols are clusters
freq_table <- matrix(1:15, nrow = 5, ncol = 3, dimnames = list(levels(data$Continent.Name), c(1,2,3)))
states_clusters <- matrix(1:42, nrow = 42, ncol = 1, dimnames = list(data[data$Continent.Name == "Europe",]$Country.or.region, "Cluster"))
freq_table
#Problem 5
#Rows are continents, cols are clusters
freq_table <- matrix(0, nrow = 5, ncol = 3, dimnames = list(levels(data$Continent.Name), c(1,2,3)))
states_clusters <- matrix(1:42, nrow = 42, ncol = 1, dimnames = list(data[data$Continent.Name == "Europe",]$Country.or.region, "Cluster"))
freq_table
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
print(i)
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table
states_clusters
#Problem 5
#Rows are continents, cols are clusters
freq_table <- matrix(0, nrow = 5, ncol = 3, dimnames = list(levels(data$Continent.Name), c(1,2,3)))
states_clusters <- matrix(1:42, nrow = 42, ncol = 1, dimnames = list(data[data$Continent.Name == "Europe",]$Country.or.region, "Cluster"))
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table
#Problem 4
#my_eigen <- eigen(cov(data[3:8]))
#c1<-my_eigen$vectors[,1]
#c2<-my_eigen$vectors[,2]
#data$c1<-as.matrix(data[3:8]) %*% c1
#data$c2<-as.matrix(data[3:8]) %*% c2
#plot(kmeans(data$c1, 3),kmeans(data$c2, 3),xlab="First component",ylab="Second component", col=data$Continent.Name, pch = 19)
k <- kmeans(my_pca$x, 3)
autoplot(k, data = my_pca$x, frame = TRUE)
#Problem 5
#Rows are continents, cols are clusters
freq_table <- matrix(0, nrow = 5, ncol = 3, dimnames = list(levels(data$Continent.Name), c(1,2,3)))
states_clusters <- matrix(1:42, nrow = 42, ncol = 1, dimnames = list(data[data$Continent.Name == "Europe",]$Country.or.region, "Cluster"))
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table
states_clusters
freq_table
setwd("/home/pdancak/school/MrPain_T/MUNI/MV013/HW2")
library(corrplot)
library(ggfortify)
data <- read.csv("happiness.csv",sep=';')
data$Continent.Name <- as.factor(data$Continent.Name)
#Problem 1
corr_mat <- cor(data[3:8])
corrplot(corr_mat, order = "hclust", addrect = 3)
#Problem 2
my_pca <- prcomp(data[3:8], center=T, scale=T)
s <- summary(my_pca)
plot(s$importance[3,],main="Cumulative Proportion of variance",ylab="proportion",type='o')
#By the first component is explained around 50% variance and by second + first 75%
#Problem 3
autoplot(my_pca, data = data,loadings = TRUE,loadings.label = TRUE, col.ind = data$Continent.Name, colour = "Continent.Name")
#Problem 4
#my_eigen <- eigen(cov(data[3:8]))
#c1<-my_eigen$vectors[,1]
#c2<-my_eigen$vectors[,2]
#data$c1<-as.matrix(data[3:8]) %*% c1
#data$c2<-as.matrix(data[3:8]) %*% c2
#plot(kmeans(data$c1, 3),kmeans(data$c2, 3),xlab="First component",ylab="Second component", col=data$Continent.Name, pch = 19)
k <- kmeans(my_pca$x, 3)
autoplot(k, data = my_pca$x, frame = TRUE)
#Problem 5
#Rows are continents, cols are clusters
freq_table <- matrix(0, nrow = 5, ncol = 3, dimnames = list(levels(data$Continent.Name), c(1,2,3)))
states_clusters <- matrix(1:42, nrow = 42, ncol = 1, dimnames = list(data[data$Continent.Name == "Europe",]$Country.or.region, "Cluster"))
for(i in 1:length(k$cluster)){
my_row <- as.integer(data[i,]$Continent.Name)
my_col <- k$cluster[i]
freq_table[my_row, my_col] <- freq_table[my_row, my_col] + 1
if(data[i,]$Continent.Name == "Europe"){
states_clusters[data[i,]$Country.or.region,1] <- k$cluster[i]
}
}
freq_table
states_clusters
#Problem 6
par(mfrow = c(2, 3))
all_sd <- sd(data$Score)
all_mean <- mean(data$Score)
breaks <- 10
xx <- seq(3, 8,by=0.01)
for(i in levels(data$Continent.Name)){
hist(data[data$Continent.Name == i,]$Score, main=i, xlab = "Score", xlim = c(3,8), breaks = breaks, freq=F)
cont_mean <- mean(data[data$Continent.Name == i,]$Score)
stan_deviation <- sd(data[data$Continent.Name == i,]$Score)
y <- dnorm(xx, cont_mean, stan_deviation)
lines(xx, y, col='red')
}
y <- dnorm(xx, mean = all_mean, sd = all_sd)
hist(data$Score, xlab = "Score", main="All", xlim = c(3,8), breaks = breaks, freq=F)
lines(xx, y, col='red')
freq_table
