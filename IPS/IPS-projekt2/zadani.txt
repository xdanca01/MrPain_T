%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Paralelní GREP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Vytvořte program založený na vláknech, který bude provádět paralelní grep. Výsledná binárka "pgrep"
bude mít 1+2i vstupních parametrů (priklady vstupu naleznete v souboru tests.txt):

pgrep MIN_SCORE RE1 SC1 [ RE2 SC2 ] [ RE3 SC3 ] ...

MIN_SCORE: minimální score
RE: regulární výraz
SC: score získané, pokud řádka na vstupu splňuje regulární výraz RE

Minimální počet parametrů jsou 3, maximální není omezen (musí však být liché číslo).

Program pgrep vždy načte jednu řádku standardního vstupu a spočítá její score. Pokud score je alespoň
MIN_SCORE, tak je řádka vypsána na standardní výstup.

Výpočet score:
1) Počáteční score pro každý řádek je 0
2) Pro každý regulární výraz ověříme, zda-li řádka splňuje reg. výray REi.
3) Pokud ano, tak přičteme k aktualnímu score hodnotu SCi (může být i záporná).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Příklad
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Mějme následující vstup:
------------------
Ahoj, tohle je pokus
jestli to bude fungovat 23
211 je vysledek

------------------

pgrep 3 "Ahoj.*" 1 "[0-9][0-9]* .*" 2 "[^0-9][^0-9]* .*" 3

Score jsou následující:
Ahoj, tohle je pokus --- score: 1+3=4
jestli to bude fungovat 23 --- score: 3
211 je vysledek --- score: 2
  --- score: 0

Vypsáno tedy bude:
------------------
Ahoj, tohle je pokus
jestli to bude fungovat 23
------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Výpočet bude probíhat následovně:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

1) Spusí se "k" vláken, každé pro jeden regulární výraz. Vlákna čekají, až jim bude předáno řízení hlavním vláknem.
2) Hlavní vlákno načte jednu řádku ze vstupu.
3) Pokud na vstupu žádná řádka nebyla, jsou všechna vlákna probuzena a korektně ukončena. Celý program končí.
4) Řízení předáno vláknům pro testování zda-li načtená řádka odpovídá reg. výrazu a vlákna __paralelně__ spočítají score.
5) Řízení je předáno zpět hlavnímu vláknu.
6) Pokud je skore alespoň zadané minimum, je řádka hlavním vláknem vypsána na standardní výstup.
7) Pokračuje se bodem 2.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Požadavky na implementaci:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Program musí splňovat následující požadavky:
1) Pro každý RE na vstupu se na začátku spustí jedno vlákno a to běží až do konce
2) V rámci jednoho vlákna lze provádět dotazy pouze na jeden přidělený RE. 
3) Pro dotazy na regulární výrazy použijte "#include <regex>" a "std::regex_match(string,regex)" --- viz priklad z democvika na regulární výrazy.
3a) Můžete použít i jinou knihovnu pro práci s Reg výrazy.
4) Pro komunikaci mezi vlákny využijte globální proměnná a pro synchronizaci semafory (pthread mutex, nebo
C++ mutex).
5) Vlákna mohou aktivně čekat:
	mutex.lock();
	white (!podminka) {
		mutex.unlock();
		mutex.lock();
	}
	<nejaka prace>
	mutex.unlock();

Dávejte pozor na data race (vstup, score, ...) a deadlock.
Není problém, aby více vláken najednou četlo ze stejné globální proměnné, ale pokud se zapisuje, je třeba zajistit atomicitu.

Za účelem testování můžete vložit na vhodná místa do kódu usleep(1). Např. před změnou score, načtení další řádky a podobně. V odevzdaném kódu již usleep nebude.

Implementace bude napsána v jazyce C s možností použití následujících komponent jazyka C++:

- regulární výrazy z C++11 (#include <regex>)
- vlákna a zámky z C++11 (#include <thread>, #include <mutex>)
- pole proměnné délky z C++11 (#include <vector>) pro uchování threadů a zámků.
- funkce int read_input_line(char *) ze souboru kostra_pgrep.c

Překlad bude prováděn buď:
$ gcc pgrep.c -o pgrep -lpthread
nebo
$ g++ pgrep.c -o pgrep -lpthread

Na merlinovi pak následovně:
$ g++-6.2 pgrep.c -o pgrep -lpthread -static

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Kostra programu a vzorové řešení
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

V adresáři /homes/kazi/rogalew/verifikace/IPS-projekt2 naleznete následující soubory:
* pgrep - vzorové řešení
* tests.txt - testy
* kompilace.txt - jak zkompilovat
* kostra_pgrep.c - základní kostra programu, ze které můžete vyjít. Vytváří pole vláken a pole zánků a následně je ruší. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Odevzdání
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Jeden soubor pgrep.c odevzdejte do pátku 29.11. do 14:00 prostřednictvím WISu k příslušnému termínu.
Na semináři dne 29.11. bude představeno vzorové řešení.


